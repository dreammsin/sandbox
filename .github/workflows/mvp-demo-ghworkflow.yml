# This demo workflow will 
## - perform a code scan using GHAS
## - build a container from dockerfile
## - push the docker image to Azure container registry
## - Login to target Azure environment
## - Query for all resources inside the sub
#
# Secret scanning happens at commit time.
# The code QL is performed at build time
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_RBAC_CREDENTIALS
#   - REGISTRY_USERNAME
#   - REGISTRY_PASSWORD
# 2. Change env variables for your configuration.

# references:
##   - GitHub Actions for Azure: https://github.com/Azure/Actions
##   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
## variables https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
## https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts


name: CICD Workflow MVP Demo

## triggers
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  push: 
    branches: [main]

permissions:
  contents: read

## set env variables 
env:
  LOGIN_SERVER: 'usecase1234registry.azurecr.io'              # set this to login server for your private container registry (e.g. 'contoso.azurecr.io', 'index.docker.io' )
  REGISTRY: 'usecase1234registry'                 # set this to proper value for REGISTRY
  NAMESPACE: 'logistics'               # set this to proper value for NAMESPACE
  IMAGE: 'simulation'                       # set this to proper value for IMAGE
  TAG: $GITHUB_RUN_NUMBER                           # set this to proper value for TAG
  DOCKERFILE: 'docker/emptycontainer.dockerfile'
  RG: 'devsecopscicdtestRG'

## jobs run in parallel by default unless otherwise specified
jobs:

  scan-code:
    name: Perform CodeQL Scan
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  copy-publish:
    name: Publish Artifacts to GHES artifact storage
    runs-on: ubuntu-latest
    steps:

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: app # optional, default is artifact
        path: |
          docker
          python

  build-push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    environment: dev
    continue-on-error: true
    # environment: AzureUSGovernment
    steps:

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: 'Build Docker Image'
      shell: bash
      run: |
        echo 'Reference: https://docs.docker.com/engine/reference/builder/'
        pwd
        ls -la
        docker build -f docker/emptycontainer.dockerfile .
        docker build -f ${{ env.DOCKERFILE }} . -t ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}

## The following steps will fail with no connectivity
    - name: 'Login to Azure Target Environment'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          SP_APP_ID=${{ secrets.SP_APP_ID }}
          SP_TENANT_ID=${{ secrets.SP_TENANT_ID }}
          CERT_PATH=${{ secrets.CERT_PATH }}
          az login --service-principal --username $SP_APP_ID --tenant $SP_TENANT_ID  --password $CERT_PATH

    - name: 'Login to Azure Container Registry via azcli'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az acr login --name ${{ env.REGISTRY }}

    - name: 'Push Docker Image to Container Registry'
      shell: bash
      run: |
        echo 'push docker image to container registry'
        echo "::notice container image was pushed to registry!"
        # docker push ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}


  deploy-verify:
    needs: [copy-publish, build-push]
    name: Deploy to Target Environment and Run Validation
    runs-on: ubuntu-latest
    environment: dev
    continue-on-error: true
    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: app

## The following steps will fail with no connectivity
    # - name: 'Login to Azure Target Environment'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

    - name: 'Deploy Infrastructure Resources via IaC'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az login --identity --username ${{ secrets.REGISTRY_USERNAME }}
          az account show
 
    # - name: 'Login to Azure Container Registry'
    #   uses: azure/docker-login@v1
    #   with:
    #     login-server: ${{ env.LOGIN_SERVER }}
    #     username: ${{ secrets.REGISTRY_USERNAME }}
    #     password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: 'Login to Azure Container Registry via azcli'
      run: |
        az acr login --name ${{ env.REGISTRY }}

    - name: 'Deploy container'
      shell: bash
      run: |
        rg="${{ env.RG }}"
        name="${{ env.IMAGE }}"
        image="${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}"
        dnsname="mvp-demo"
        az container create --resource-group $rg --name $name --image $image --dns-name-label $dnsname --ports 80


    - name: Azure logout
      run: |
        az logout
