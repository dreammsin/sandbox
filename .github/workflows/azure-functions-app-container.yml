# This demo workflow will 
## perform a code scan using GHAS
## build a container from dockerfile
## push the docker image to Azure container registry
## Login to target Azure environment
## Query for all resources inside the sub
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/functions-create-function-linux-custom-image?tabs=in-process%2Cbash%2Cazure-cli&pivots=programming-language-csharp
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_RBAC_CREDENTIALS
#   - REGISTRY_USERNAME
#   - REGISTRY_PASSWORD
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Container Action: https://github.com/Azure/functions-container-action
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy container to Azure Functions App

on: [workflow_dispatch, push]

permissions:
  contents: read
 
env:
  LOGIN_SERVER: 'usecase1234registry.azurecr.io'              # set this to login server for your private container registry (e.g. 'contoso.azurecr.io', 'index.docker.io' )
  REGISTRY: 'usecase1234registry'                 # set this to proper value for REGISTRY
  NAMESPACE: 'logistics'               # set this to proper value for NAMESPACE
  IMAGE: 'simulation'                       # set this to proper value for IMAGE
  TAG: $GITHUB_RUN_NUMBER                           # set this to proper value for TAG

jobs:

  scan-build-publish:
    runs-on: ubuntu-latest
    environment: dev
    # environment: AzureUSGovernment
    steps:

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: 'sanity check'
      shell: bash
      run: |
        echo "hello people!"
        echo "Run-Number is: $GITHUB_RUN_NUMBER"

    - name: 'Build  Docker Image'
      shell: bash
      run: |
        pwd
        ls -la
        docker build -f /docker/emptycontainer.dockerfile

    # - name: 'Login via Azure CLI'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

    # - name: 'Docker Login'
    #   uses: azure/docker-login@v1
    #   with:
    #     login-server: ${{ env.LOGIN_SERVER }}
    #     username: ${{ secrets.REGISTRY_USERNAME }}
    #     password: ${{ secrets.REGISTRY_PASSWORD }}

    # - name: 'Compose Customized Docker Image'
    #   shell: bash
    #   run: |
    #     # If your function app project is not located in your repository's root
    #     # Please change the path to your directory for docker build
    #     docker build . -t ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}
    #     # docker push ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE }}:${{ env.TAG }}


  query-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Deploy to target env'
      shell: bash
      run: |
        echo "ya!"

    # - name: Azure logout
    #   run: |
    #     az logout
